/**
 * Mixin for generate classes from palette array
 *
 * @description
 * Usage:
 * .generate-palette-classes(color background background-color, @colorPallete , prefix);
 *   First parameter is an array of attributes to be added, seperated with spaces
 *   Second parameter is a key-value array
 *   Third parameter is a prefix to the keys
 *
 * @colorPallete:
 *   red #ff4040,
 *   purple #5f4ed8,
 *   goldy gold;
 *
 *   It will generate the class according to the key : .red, .purple, .goldy
 *   if you use prefix: .prefix-red, .prefix-goldy
 *   If you use it inside the other class, it will combine to those like this:
 *
 * @example
 *  .add {
 *    .generate-palette-classes(color, @colorPallete, color-)
 *  }
 *
 *  // It will produce:
 *
 *  .add.color-goldy {
 *    color: gold
 *  }
 *  .add.color-purple {
 *    color: #5f4ed8
 *  }
 */

.generate-palette-classes(@attributes, @array, @prefix: '') {
  .iter(length(@array));

  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@array, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);
    @classname: ~'@{prefix}@{key}';

    &.@{classname} {
      .attrList(length(@attributes));
      .attrList(@a) when (@a > 0) {
        .attrList( @a - 1 );
        @eachAtr: extract(@attributes, @a);
        @{eachAtr}: @value !important;
      }
    }
  }
}


/*
  Mixin to generate buttons should be included inside some class where you can add some other parameters
  First parameter should be an array, second is a boolean(optional) means what should be the default design of the button
  true = outlined or false = solid buttons
  Anyway it can be manually set by classes .bg or .outline
  
  Example:
  @pallete: red red, ash #7e7e7e, green green, primary #e88d9d;
  .button {
    font-family: Arial;
    border-radius: 3rem;
    font-weight: 400;
    .buttons(@pallete)
  }
*/
.buttons(@pallete, @outline : true) {
  display: inline-block;
  background-image: none;
  padding: 0.5em 2em;
  text-align: center;
  outline: 0;
  text-decoration: none;
  border: 2px solid;
  &.expanded {
    width: 100%;
  }
  &.wide {
    padding-left: 3em;
    padding-right: 3em;
  }
  // styling for outline
  .isoutline(@color) when (@outline) {
    border-color: @color;
    color: @color;
    &.bg {
      color: #fff;
      background: @color;
      border: 2px solid;
    }
  }
  // styling for solid buttons
  .isoutline(@color) when (@outline = false) {
    color: #fff;
    background: @color;
    &.outline {
      color: @color;
      border-color: @color;
      background: transparent;
    }
  }
  //loop through the colors of the @pallete , generating classes
  .iter(@i) when (@i > 0) {
    .iter(@i - 1);
    @pair: extract(@pallete, @i);
    @key: extract(@pair, 1);
    @value: extract(@pair, 2);
    @classname: ~"@{key}";

    &.@{classname} {
      .isoutline(@value);
    }
  }

  .iter(length(@pallete));
}


// Classes for paddings and margins mixin
.generate-indent-classes(@indent, @value, @size) {

  // Block margins
  .@{size}margin-@{indent} {
    margin: @value !important;
  }
  .@{size}margin-@{indent}-t {
    margin-top: @value !important;
  }
  .@{size}margin-@{indent}-r {
    margin-right: @value !important;
  }
  .@{size}margin-@{indent}-b {
    margin-bottom: @value !important;
  }
  .@{size}margin-@{indent}-l {
    margin-left: @value !important;
  }
  .@{size}margin-@{indent}-v,
  .@{size}margin-@{indent}-tb {
    margin-top: @value !important;
    margin-bottom: @value !important;
  }
  .@{size}margin-@{indent}-h,
  .@{size}margin-@{indent}-rl {
    margin-right: @value !important;
    margin-left: @value !important;
  }

  // Block paddings
  .@{size}padding-@{indent} {
    padding: @value !important;
  }
  .@{size}padding-@{indent}-t {
    padding-top: @value !important;
  }
  .@{size}padding-@{indent}-r {
    padding-right: @value !important;
  }
  .@{size}padding-@{indent}-b {
    padding-bottom: @value !important;
  }
  .@{size}padding-@{indent}-l {
    padding-left: @value !important;
  }
  .@{size}padding-@{indent}-v,
  .@{size}padding-@{indent}-tb {
    padding-top: @value !important;
    padding-bottom: @value !important;
  }
  .@{size}padding-@{indent}-h,
  .@{size}padding-@{indent}-rl {
    padding-right: @value !important;
    padding-left: @value !important;
  }

}

// Responsive visibility mixin
.generate-visibility-classes(@size) {
  .hide-@{size} {
    display: none !important;
  }
}

// Responsive texts aligning mixin
.generate-text-aligning-classes(@size) {

  .text-left@{size} {
    text-align: left !important;
  }
  .text-right@{size} {
    text-align: right !important;
  }
  .text-center@{size} {
    text-align: center !important;
  }
  .text-nowrap@{size} {
    white-space: nowrap !important;
  }

}

/**
 * Classes generation for indents and hiding
 */

.generate-indents(@size) {
  // Iterate defined indents and generate classes for them
  .blocks-iterate-indents(length(@block-indents));
  .blocks-iterate-indents(@n, @i: 1) when (@i <= @n) {
    @pair: extract(@block-indents, @i);
    @indent: extract(@pair, 1);
    @value: extract(@pair, 2);
    .generate-indent-classes(@indent, @value, @size);
    .blocks-iterate-indents(@n, (@i + 1));
  }
}



// Generate classes without size definition
.generate-indents(e(''));
// NOTE: duplicate classes from texts.less
.generate-text-aligning-classes(e(''));

// Generate classes for a first defined resolution
.generate-indents(e('@{grid-start-size}-'));
.generate-text-aligning-classes(e('-@{grid-start-size}'));

// Generate indent classes for defined resolutions
// With media breakpoints based on min-width (mobile first)
.blocks-iterate-min-sizes(length(@grid-min-sizes));
.blocks-iterate-min-sizes(@n, @i: 1) when (@i <= @n) {
  @pair: extract(@grid-min-sizes, @i);
  @size: extract(@pair, 1);
  @query: extract(@pair, 2);
  @media @query {
    .generate-visibility-classes(@size);
    .generate-text-aligning-classes(e('-@{size}'));
    .generate-indents(e('@{size}-'));
  }
  .blocks-iterate-min-sizes(@n, (@i + 1));
}

// Generate indent classes for defined resolutions
// With media breakpoints based on max-width (non-mobile first)
.blocks-iterate-max-sizes(length(@grid-max-sizes));
.blocks-iterate-max-sizes(@n, @i: 1) when (@i <= @n) {
  @pair: extract(@grid-max-sizes, @i);
  @size: extract(@pair, 1);
  @query: extract(@pair, 2);
  @media @query {
    .generate-visibility-classes(e('@{size}-max'));
    .generate-text-aligning-classes(e('-@{size}-max'));
    .generate-indents(e('@{size}-max-'));
  }
  .blocks-iterate-max-sizes(@n, (@i + 1));
}

// Generate classes for defined intervals
.blocks-iterate-intervals(length(@grid-intervals));
.blocks-iterate-intervals(@n, @i: 1) when (@i <= @n) {
  @pair: extract(@grid-intervals, @i);
  @size: extract(@pair, 1);
  @query: extract(@pair, 2);
  @media @query {
    .generate-visibility-classes(e('@{size}-only'));
    .generate-text-aligning-classes(e('-@{size}-only'));
    .generate-indents(e('@{size}-only-'));
  }
  .blocks-iterate-intervals(@n, (@i + 1));
}


.more(@conten: 'Подробнее', @color: @white){
  height: 60px;
  background: -webkit-linear-gradient(rgba(255,255,255,0.37) 0%, @color 60%);
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  content: @content;
  display: flex;
  align-items: flex-end;
  justify-content: center;
  text-transform: uppercase;
  cursor: pointer;
  padding-bottom: @indent-small;
}


.full-bg(@color: null, @imgUrl: null) {
  content: '';
  position: absolute;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  & when ( iscolor(@color) ) {
    background-color: @color;
  }
  & when not( @imgUrl = null ) {
    background-image: @imgUrl;
    background-size: cover;
    background-position: center center;
  }
}
